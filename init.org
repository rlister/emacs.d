#+TITLE: Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* Installation

This config uses [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]] in a literate programming style.

To install, clone this repo anywhere, and run ~C-c C-v t~ [[help:org-babel-tangle][(org-babel-tangle]]), which will generate a new [[file:~/.emacs.d/init.el][~/.emacs.d/init.el]].

* Paths

#+begin_src emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
#+end_src

* Startup

Reduce GC for faster startup.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

Remove unnecessary initial work.

#+begin_src emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message "ric")
  ;; (setq warning-minimum-level :error)
  ;; (setq ring-bell-function 'ignore)
#+end_src

Answer questions more easily.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Allow disabled commands.

#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src

* Package management

** Archives

Show packages from [[https://melpa.org/][MELPA]] archive.

#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** Straight package manager

When installing [[https://github.com/raxod502/straight.el][straight.el]], use =develop= branch instead of the
infrequently-updated =master=.

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")
#+end_src

Bootstrap straight on new emacs installs.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Turn on ~use-package~ integration:

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

** Customizations

Do not write customizations to =init.el=.

#+begin_src emacs-lisp
  (with-eval-after-load 'cus-edit
    (setq custom-file "~/.emacs.d/custom.el"))
#+end_src

* Buffers

Change style for unique buffer names to show path after filename.

#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-separator " | ")
#+end_src

* Backups

Emacs makes backups of changed files, ending in =~=, unless ~make-backup-files~ is set to ~nil~.

Move these files out of the way to a dedicated dir, make multiple, numbered backups, and don't ask me before deleting old backups.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq version-control t)
  (setq delete-old-versions t)
#+end_src

* Mode line

Display things in mode-line.

#+begin_src emacs-lisp
  (column-number-mode t)
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

* Window handling

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Choice.html#Window-Choice][How display-buffer works]].

Whether =display-buffer= should create new windows.

#+begin_src emacs-lisp
  (setq pop-up-windows t)
#+end_src

Use current window for =man= command, and do not use other frames.

#+begin_src emacs-lisp
  (setq Man-notify-method 'pushy)
#+end_src

Undo/redo of window configuration.

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

* Mark and region

Typed text replaces region.

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

Do not waste resources loading the X primary selection in
transient-mark-mode, if it is not needed for middle-click paste.

#+begin_src emacs-lisp
  (setq select-active-regions nil)
#+end_src

* Whitespace handling

On save, delete whitespace chars trailing each line.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Use single space, rather than double space, as sentence delimiter for
moving and killing by sentence.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Paragraph formatting

The missing reverse operation to =fill-paragraph=; source from [[https://www.emacswiki.org/emacs/UnfillParagraph][EmacsWiki]].

#+begin_src emacs-lisp
  (defun unfill-paragraph (&optional region)
    "Opposite of fill-paragraph."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  (define-key global-map (kbd "M-Q") 'unfill-paragraph)
#+end_src

* GPG and EasyPG

Set this to ~loopback~ to redirect all gpg pinentry queries to the caller: in this case emacs minibuffer.

#+begin_src emacs-lisp
  (setq epg-pinentry-mode 'loopback)
#+end_src

* Dired

Set external programs to use and human-readable file sizes.

#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (setq dired-guess-shell-alist-user '(("\\.pdf\\'" "mupdf")))
    (setq dired-listing-switches "-alh"))
#+end_src

* Parentheses

[[info:emacs#Matching][Show paren mode]] highlights matching delimiters.

#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-when-point-in-periphery t)
#+end_src

* Selectrum

[[https://github.com/raxod502/selectrum/][Selectrum]] selection completion drop-in for completing-read.

#+begin_src emacs-lisp
  (selectrum-mode +1)
#+end_src

[[https://github.com/raxod502/prescient.el][Prescient]] is a library for sorting candidate lists using the
algorithm: last few, most frequent, remaining by length.

#+begin_src emacs-lisp
  (with-eval-after-load 'selectrum
    (selectrum-prescient-mode +1))
#+end_src

[[https://github.com/minad/marginalia][Marginalia]] is a library to add annotations to selectrum candidates.
Turn it on when needed with =M-x marginalia-mode=.

#+begin_src emacs-lisp
  (with-eval-after-load 'marginalia
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (define-key minibuffer-local-map (kbd "C-=") #'marginalia-cycle))
#+end_src

* Search

Space will match any non-greedy series of characters, for fuzzy
search. Turn on [[https://github.com/emacsorphanage/anzu][anzu]] for incremental query-replace and match count in
modeline.

#+begin_src emacs-lisp
  (with-eval-after-load 'isearch
    (setq isearch-lax-whitespace t)
    (setq search-whitespace-regexp ".*?")
    (global-anzu-mode +1))
#+end_src

* Project.el

Old version included in emacs27, so get latest from melpa for now.

#+begin_src emacs-lisp
  (with-eval-after-load 'project
    (add-to-list 'project-switch-commands '(?t "Vterm" vterm))
    (add-to-list 'project-switch-commands '(?b "Buffer" project-switch-to-buffer)))
#+end_src

* Version control
** magit

[[https://magit.vc/][Magit]] git porcelain. Use whole frame for status view.

#+begin_src emacs-lisp
  (with-eval-after-load 'magit
    (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1))
#+end_src

Requires an authinfo entry like:

#+begin_src
machine api.github.com login <user>^forge password <password>
#+end_src

* Org mode
** org

Maybe get latest [[https://code.orgmode.org/bzg/org-mode][org-mode]] from melpa rather than old version shipped with emacs.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-adapt-indentation nil)
    (setq org-src-fontify-natively t)
    (setq org-src-window-setup 'current-window) ;do not split windows
    (setq org-use-speed-commands 't) ;use speedkeys at start of headline (? for list of keys)
    (setq org-startup-folded t)      ;no expand all levels on opening file
    (setq org-directory "~/src/doc")
    (setq org-refile-targets
          '((nil :maxlevel . 1)
            ("~/src/doc/work.org" :maxlevel . 3)
            ("~/src/doc/home.org" :maxlevel . 3)))
    (setq org-fontify-done-headline t)
    (setq org-todo-keywords '("TODO" "BLOCK(b@/!)" "WIP(w!)" "|" "DONE(d!)" "CANCELLED(c@)"))
    (setq org-todo-interpretation 'sequence)
    (setq org-todo-keyword-faces
          '(("BLOCK" .  (:foreground "LightGoldenRod"))
            ("WAIT"  .  (:foreground "LightGoldenRod"))
            ("WIP"   .  (:foreground "LightGoldenRod"))))
    (setq org-log-done 'time)
    (setq auto-mode-alist (rassq-delete-all 'dcl-mode auto-mode-alist))) ;no dcl for .com files
#+end_src

** org-agenda

#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (add-hook 'org-agenda-mode-hook 'hl-line-mode)
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-align-tags-to-column 80)
    (setq org-agenda-todo-ignore-scheduled 'all)
    (setq org-agenda-files '("~/src/doc/work.org" "~/src/doc/home.org"))
    (setq org-agenda-log-mode-items '(clock state))
    (setq org-agenda-custom-commands
          '(("g" "Geekbot"
             agenda ""
             ((org-agenda-files '("~/src/doc/work.org" "~/.org-jira/"))
              (org-agenda-overriding-header "Standup")
              (org-agenda-show-log t)
              (org-agenda-todo-keyword-format "- %-4s")
              (org-agenda-remove-tags t)
              (org-agenda-prefix-format "")))
            ("c" "Composite agenda and todo"
             ((agenda "")
              (alltodo)))
            ("h" "Home tasks"
             ((agenda "" ((org-agenda-files '("~/src/doc/home.org"))))
              (alltodo "" ((org-agenda-files '("~/src/doc/home.org"))))))
            ("w" "Work tasks"
             ((agenda ""
                      ((org-agenda-files '("~/src/doc/work.org" "~/.org-jira/"))
                       (org-agenda-text-search-extra-files nil)))
              (alltodo ""
                       ((org-agenda-files '("~/.org-jira/")))))))))
#+end_src

** org-tempo

Structure templates starting with e.g. =<s<TAB>=. See
=org-structure-template-alist= and =org-tempo-keywords-alist= for
structure types. Latex is available as both =l= and =L=, so reuse =l=
for =emacs-lisp=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-tempo
    (setcdr (assoc "l" org-structure-template-alist) "src emacs-lisp"))
#+end_src

** org-capture

Set up [[https://orgmode.org/org.html#Capture-templates][capture templates]].

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (setq org-capture-templates
          '(("t" "Todo" entry (file+olp+datetree "~/src/doc/work.org")
             "* TODO %?" :empty-lines 0 :tree-type week)
            ("d" "Done" entry (file+olp+datetree "~/src/doc/work.org")
             "* DONE %?\n- State \"DONE\" %U" :empty-lines 0 :tree-type week)
            ("m" "Meeting" entry (file+olp+datetree "~/src/doc/work.org")
             "* MTG %?" :empty-lines 0 :tree-type week)
            ("h" "Home" entry (file+olp+datetree "~/src/doc/home.org")
             "* TODO %?" :empty-lines 0 :tree-type week)
            ("j" "Journal" entry (file+olp+datetree "~/src/doc/work.org")
             "* %<%H:%M> %?" :empty-lines 0 :tree-type week))))
#+end_src

** org-present

#+begin_src emacs-lisp
  ;;   need hook
  ;;   ((org-present-mode . (lambda ()
  ;;                          (org-present-big)
  ;;                          (org-display-inline-images)
  ;;                          (org-present-hide-cursor)
  ;;                          (org-present-read-only)))
  ;;    (org-present-mode-quit . (lambda ()
  ;;                              (org-present-small)
  ;;                              (org-remove-inline-images)
  ;;                              (org-present-show-cursor)
  ;;                              (org-present-read-write)))))
#+end_src

** org-jira

[[https://github.com/ahungry/org-jira][org-jira]] populates org-mode files with jira issue data.

Set up account lookup and login creds in =~/.authinfo.gpg=:

#+begin_src
machine atlassian.net url https://<account>.atlassian.net
machine <account>.atlassian.net user <email> port 443 password <passwd>
#+end_src

#+begin_src emacs-lisp
  ;; repo "ahungry/org-jira"
  ;; commands (org-jira-get-issue org-jira-get-issues
  (with-eval-after-load 'org-jira
    (let ((url (plist-get (nth 0 (auth-source-search :host "atlassian.net" :max 1 t)) :url)))
      (setq jiralib-url url)))
#+end_src

Now run =org-jira-get-issues=.

* vterm

[[https://github.com/akermu/emacs-libvterm][Emacs-vterm]] bridge to [[https://github.com/neovim/libvterm][libvterm]].

** linux install

On linux we can install from MELPA and compilation happens correctly inside emacs during install.

** macos install

On macOS we need to download and compile emacs-vterm manually.

#+begin_src sh
  brew install cmake libtool
  git clone https://github.com/akermu/emacs-libvterm.git
  cd emacs-libvterm/build
  cmake .. && make
#+end_src

Add compiled file location to =load-path=.

#+begin_src emacs-lisp
  (when (equal system-type 'darwin)
    (add-to-list 'load-path "~/src/emacs-libvterm"))
#+end_src

** package install and config

#+begin_src emacs-lisp
  (with-eval-after-load 'vterm
    (define-key vterm-copy-mode-map (kbd "<M-return>") #'vterm-copy-mode)
    (define-key vterm-mode-map (kbd "C-t") nil)
    (define-key vterm-mode-map (kbd "<M-return>") #'vterm-copy-mode)
    (define-key vterm-mode-map (kbd "M-r") #'vterm-send-C-r)
    (define-key vterm-mode-map (kbd "<C-backspace>") #'vterm-send-meta-backspace)
    (define-key vterm-mode-map (kbd "M-h") #'ric/vterm-mark-last-output)
    (define-key vterm-mode-map (kbd "<C-return>") #'ric/vterm-mark-last-output)
    (define-key vterm-mode-map (kbd "M-v") #'(lambda () (interactive) (vterm-copy-mode) (scroll-down-command)))
    (setq vterm-buffer-name-string "*vterm %s*")
    (setq vterm-max-scrollback 10000)
    (setq vterm-copy-exclude-prompt t)    ;exclude prompt from copy in vterm-copy-mode-done

    (defun ric/vterm-mark-last-output ()
      "Mark the last batch of output from a shell command."
      (interactive)
      (vterm-copy-mode)
      (beginning-of-line)
      (set-mark-command nil)
      (vterm-previous-prompt 1)
      (forward-line 1)))
#+end_src

* Movement commands

Preserve point position on scroll, so reverse operation returns to same location:

#+begin_src emacs-lisp
  ;; (setq scroll-preserve-screen-position t)
#+end_src

At beginning of line, =kill-line= kills newline as well:

#+begin_src emacs-lisp
  ;; (setq kill-whole-line t)
#+end_src

Motion starting at end of line keeps to ends of lines:

#+begin_src emacs-lisp
  ;; (setq line-move-visual nil)
  ;; (setq track-eol t)
#+end_src

Better key placement for common movement:

#+begin_src emacs-lisp
  ;; (define-key global-map (kbd "M-p") 'backward-paragraph)
  ;; (define-key global-map (kbd "M-n") 'forward-paragraph)
#+end_src

Soup up =mark-word= to move backwards if at end of line, give or take
any non-word chars.

#+begin_src emacs-lisp
  (defun ric/mark-word-args (&optional arg allow-extend)
    "Advise mark-word to move backwards if we are effectively at end of line."
    (if (looking-at "\\W*$")
        (list -1 t)
      (list arg t)))

  (advice-add 'mark-word :filter-args #'ric/mark-word-args)
#+end_src

Duplicate the current line.

#+begin_src emacs-lisp
  (defun ric/duplicate-line ()
    "Duplicate current line, leaving point in current position."
    (interactive)
    (save-excursion
      (end-of-line)
      (copy-region-as-kill (line-beginning-position) (point))
      (open-line 1)
      (forward-line)
      (yank)))
#+end_src

* Comments

Toggle comments on region or line, without moving point. This works
better as a toggle than ~comment-dwim~.

#+begin_src emacs-lisp
  (defun ric/comment-dwim (&optional arg)
    "Toggle comments on region if active, otherwise toggle comment on line."
    (interactive "P")
    (if (region-active-p)
	(comment-or-uncomment-region (region-beginning) (region-end) arg)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position) arg)))
#+end_src

* Programming modes

** indentation

Always uses 2 spaces (never tabs) for indentation.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default c-basic-offset 2)
  (setq-default sh-basic-offset 2)
  (setq-default python-indent 2)
  (setq-default js-indent-level 2)
  (setq-default css-indent-offset 2)
#+end_src

** ruby

Some extra filenames to use =ruby-mode=.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Staxfile" . ruby-mode))
#+end_src

** completion

Complete with [[info:autotype#Hippie Expand][info:autotype#Hippie Expand]].

#+begin_src emacs-lisp
  (use-package hippie-exp
    :bind
    ("<C-tab>" . hippie-expand))
#+end_src

* elfeed

[[https://github.com/skeeto/elfeed][elfeed]] RSS reader. We keep feed list in =doc/elfeed.opml=, for a new
emacs instance, run =elfeed-load-opml=.

Feed database is stored in =~/.elfeed=.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
    (setq shr-use-fonts nil)
    (setq elfeed-search-filter "@2-weeks-ago +unread")
    (define-key elfeed-show-mode-map "r" #'elfeed-kill-buffer))
#+end_src

* Web

** w3m

Install package:

#+begin_src sh
  git clone https://aur.archlinux.org/emacs-w3m-git.git
#+end_src

Config:

#+begin_src emacs-lisp
  (use-package w3m
    :load-path "/usr/share/emacs/site-lisp/w3m"
    :config
    (setq w3m-search-default-engine "duckduckgo")
    (setq w3m-use-favicon nil)
    :bind (("C-h C-b" . w3m-bookmark-view)
           :map w3m-mode-map
           ("n" . w3m-next-anchor)
           ("C-<next>" . w3m-next-buffer)
           ("p" . w3m-previous-anchor)
           ("C-<prior>" . w3m-previous-buffer)
           ("x" . w3m-delete-buffer)
           ("M-n" . forward-paragraph)))
#+end_src

* Mouse

Turn off mouse clicks from trackpad.

#+begin_src emacs-lisp
  (dolist (key '([mouse-1] [down-mouse-1] [C-down-mouse-1]))
    (global-unset-key key))
#+end_src

* Slack

Emacs slack mode. Slack team name and token are set in authinfo file in format:

#+begin_example
machine slack login <team> password <xoxs-...>
#+end_example

#+begin_src emacs-lisp
  (use-package slack
    :straight (slack :type git :host github :repo "yuya373/emacs-slack")
    :commands (slack-start)
    :bind (("C-= C-=" . tracking-next-buffer)
           ("C-= c" . slack-select-rooms)
           ("C-= g" . slack-group-select)
           ("C-= i" . slack-im-select)
           ("C-= T" . slack-all-threads)
           ("C-= u" . slack-select-unread-rooms)
           :map slack-mode-map
           ("M-p" . slack-buffer-goto-prev-message)
           ("M-n" . slack-buffer-goto-next-message)
           ("@" . slack-message-embed-mention)
           ("#" . slack-message-embed-channel)
           ("C-c C-e". slack-message-edit)
           ("C-c C-k". slack-message-delete)
           ("C-c e" . slack-insert-emoji)
           ("C-c C-r" . slack-message-add-reaction)
           ("C-c m" . ric/slack-update-mark)
           ("C-c C-y" . slack-clipboard-image-upload)
           ("<C-return>" . slack-thread-show-or-create)
           :map slack-thread-message-buffer-mode-map
           ("M-p" . slack-buffer-goto-prev-message)
           ("M-n" . slack-buffer-goto-next-message)
           ("@" . slack-message-embed-mention)
           ("#" . slack-message-embed-channel)
           ("C-c C-e". slack-message-edit)
           ("C-c C-k". slack-message-delete)
           ("C-c e" . slack-insert-emoji)
           ("C-c C-r" . slack-message-add-reaction)
           ("C-c C-y" . slack-clipboard-image-upload))
    :config
    (setq slack-render-image-p t)
    (setq slack-buffer-emojify nil)
    (setq slack-prefer-current-team t)
    (setq slack-display-team-name nil) ;just channel etc name
    (setq slack-buffer-function #'switch-to-buffer) ;use same window
    (setq slack-modeline-count-only-subscribed-channel nil)
    (setq slack-thread-also-send-to-room nil)
    (setq lui-time-stamp-format "[%a %H:%M] ")
    (setq lui-time-stamp-position 'left)
    (slack-register-team
     :default t
     :name (plist-get (car (auth-source-search :host "slack")) :user)
     :token (auth-source-pick-first-password :host "slack")
     :display-profile-image nil
     :mark-as-read-immediately t
     :modeline-enabled t
     :modeline-name "ap"
     :visible-threads t
     :disable-block-format t)

    ;; remove user status and image
    (defun slack-user-status (_id _team) "")

    ;; disable user images
    (cl-defun slack-user-image (user team &optional (size 32)) nil)

    ;; shorten buffer names
    (cl-defmethod slack-buffer-name ((this slack-message-buffer))
      (slack-if-let* ((team (slack-buffer-team this))
                      (room (slack-buffer-room this))
                      (room-name (slack-room-name room team)))
          (format "*Slack: %s*" room-name)))

    ;; implement https://github.com/yuya373/emacs-slack/pull/532 until merged upstream
    ;; so that we can load channels with a giphy image
    (defclass slack-image-block-element (slack-block-element)
      ((type :initarg :type :type string :initform "image")
       (image-url :initarg :image_url :type string)
       (alt-text :initarg :alt_text :type string)
       (image-height :initarg :image_height :type (or number null))
       (image-width :initarg :image_width :type (or number null))
       (image-bytes :initarg :image_bytes :type (or number null))))

    (defun ric/slack-update-mark ()
      "Force the read mark to the end of the channel."
      (interactive)
      (end-of-buffer)
      (slack-buffer-goto-prev-message)
      (slack-message-update-mark)
      (end-of-buffer)))
#+end_src

** Alerts

Set up =alert= for slack notification.

#+begin_src emacs-lisp
  (use-package alert
    :commands (alert)
    :after slack
    :config
    (setq alert-default-style 'libnotify))
#+end_src

** Mark hack

Some DMs fail to update the mark correctly, and thus continue to show
huge numbers of unreads. Bind this to a key to force update.

** Kill all slack message buffers

#+begin_src emacs-lisp
  (defun ric/kill-slack-message-buffers ()
    "Kill all slack message buffers."
    (interactive)
    (save-excursion
      (let ((count 0))
        (dolist (buffer (buffer-list))
          (set-buffer buffer)
          (when (equal major-mode 'slack-message-buffer-mode)
            (setq count (1+ count))
            (kill-buffer buffer)))
        (message "Killed %i slack buffers" count))))
#+end_src

* gcalcli

Install gcalcli with system python.

#+begin_src sh
  sudo pacman -S python python-pip
  pip install gcalcli
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/src/gcalcli-mode")
  (autoload 'gcalcli-agenda "gcalcli-mode" nil t)
  (with-eval-after-load 'gcalcli-mode
    (setq gcalcli-bin "~/.local/bin/gcalcli")
    (setq gcalcli-config-alist
          '((home . "~/.config/gcalcli/home")
            (work . "~/.config/gcalcli/work"))))
#+end_src

* Mew

[[http://mew.org/en/][Mew mailreader]]. Install as an OS package since it includes binaries.

#+begin_src sh
  git clone https://aur.archlinux.org/emacs-mew.git
  makepkg -sic
#+end_src

Autoload here, configure in =~/.mew.el=.

#+begin_src emacs-lisp
  (autoload 'mew "mew" nil t)
#+end_src

* macOS specifics

Fix modifier keys in macOS.

#+begin_src emacs-lisp
  (when (equal window-system 'ns)
    (set-face-font 'default "Roboto Mono-11:foundry=GOOG")
    (setq default-directory "~/")
    (blink-cursor-mode -1)
    (menu-bar-mode -1)
    (setq ns-auto-hide-menu-bar nil)
    (setq ns-command-modifier 'control)
    (setq ns-right-command-modifier 'control)
    (setq ns-option-modifier 'meta)
    (setq ns-control-modifier 'control)
    (setq ns-function-modifier 'hyper)
    (when (display-graphic-p)
      (tool-bar-mode -1)
      (customize-set-variable 'scroll-bar-mode nil)
      (customize-set-variable 'horizontal-scroll-bar-mode nil)
      (setq default-frame-alist '((undecorated . t)))))
#+end_src

* Keybindings

In GUI emacs we can distinguish =C-m= from =RET= and thus get a better
binding than =C-@=.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (define-key input-decode-map [?\C-i] [C-i])
    (global-set-key (kbd "<C-i>") #'project-find-file)
    (define-key input-decode-map [?\C-m] [C-m])
    (global-set-key (kbd "<C-m>") #'mark-word))
#+end_src

Overrides using minor mode.

#+begin_src emacs-lisp
  (define-minor-mode ric-keys-mode
    "Set up global bindings to override other modes."
    :lighter " rk"
    :init-value 1
    :global t
    :keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-j") #'other-window)
      (define-key map (kbd "C-t") #'switch-to-buffer)
      (define-key map (kbd "C-;") #'ric/comment-dwim)
      (define-key map (kbd "C-x d") #'dired-jump)
      (define-key map (kbd "C-c i") #'string-inflection-all-cycle)
      (define-key map (kbd "C-c l") #'link-hint-open-link)
      (define-key map (kbd "C-c L") #'link-hint-copy-link)
      (define-key map (kbd "C-c m") #'imenu)
      (define-key map (kbd "C-c r") #'rg)
      (define-key map (kbd "C-c t") #'vterm)
      (define-key map (kbd "C-c y") #'browse-kill-ring)
      (define-key map (kbd "C-c d") #'ric/duplicate-line)
      (define-key map (kbd "M-s r") #'anzu-query-replace)
      (define-key map (kbd "C-c u") #'winner-undo)
      (define-key map (kbd "C-x g") #'magit-status)
      (define-key map (kbd "C-x m") #'execute-extended-command)
      (define-key map (kbd "C-z") #'zap-up-to-char)
      (define-key map (kbd "C-x C-z") nil)
      (define-key map (kbd "C-x k") #'kill-current-buffer)
      (define-key map (kbd "M-SPC") #'cycle-spacing)
      map))
#+end_src

* Server

Start server if not running in this or any other emacs process.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src
