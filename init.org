#+TITLE: Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* Installation

This config uses [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]] in a literate programming style.

To install, clone this repo anywhere, and run ~C-c C-v t~ [[help:org-babel-tangle][(org-babel-tangle]]), which will generate a new [[file:~/.emacs.d/init.el][~/.emacs.d/init.el]].

* Debug

#+begin_src emacs-lisp
  (setq debug-on-error nil)
#+end_src

* Paths

#+begin_src emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
#+end_src

* Basic defaults

Remove distractions.

#+begin_src emacs-lisp
  (blink-cursor-mode -1)
  (menu-bar-mode -1)
  (setq default-directory "~/")
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  (setq warning-minimum-level :error)
  (setq ring-bell-function 'ignore)
  (setq pop-up-windows t)
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Turn off GUI features.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (customize-set-variable 'scroll-bar-mode nil)
    (customize-set-variable 'horizontal-scroll-bar-mode nil)
    (setq default-frame-alist '((undecorated . t))))
#+end_src

Typed text replaces region.

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src


Control-based binding for =M-x=.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x m") 'execute-extended-command)
#+end_src

Steal =dabbrev= key for [[info:autotype#Hippie Expand][info:autotype#Hippie Expand]].

#+begin_src emacs-lisp
  (global-set-key (kbd "<M-/>") 'hippie-expand)
#+end_src

Never want to suspend frame by mistake, and not needed w/tiling wm.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-z") nil)
#+end_src

* Buffers

Nicer buffer bindings.

#+begin_src emacs-lisp
  (define-key global-map (kbd "M-'") 'switch-to-buffer)
  (define-key global-map (kbd "C-t") 'switch-to-buffer)
  (define-key global-map (kbd "M-s M-s") 'save-buffer)
#+end_src

Change from ~kill-buffer~ so there is no prompt for buffer name.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x k") 'kill-current-buffer)
#+end_src

Change style for unique buffer names to show path after filename.

#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-separator " | ")
#+end_src

* Backups

Emacs makes backups of changed files, ending in =~=, unless ~make-backup-files~ is set to ~nil~.

Move these files out of the way to a dedicated dir, make multiple, numbered backups, and don't ask me before deleting old backups.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq version-control t)
  (setq delete-old-versions t)
#+end_src

* Mode line

Display things in mode-line.

#+begin_src emacs-lisp
  (column-number-mode t)
  (setq display-time-24hr-format t)
  (display-time-mode 1)
  (display-battery-mode 1)
#+end_src

* Window handling

Names of buffers that ~display-buffer~ should show in the current window.

#+begin_src emacs-lisp
  (dolist (name '("*Help*" "*Buffer List*" "*Faces*" "*Bufler*" "*eww bookmarks*"))
     (add-to-list 'same-window-buffer-names name))
#+end_src

Use current window for =man= command.

#+begin_src emacs-lisp
  (setq Man-notify-method 'pushy)
#+end_src

Enable =C-c left= and =C-c right= for undo/redo of window configuration.

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

Split window horizontally or vertically, based on width, and toggle
between split and unsplit.

#+begin_src emacs-lisp
  (defun ric/split-dwim ()
    "Split, based on split-width-threshold, or unsplit."
    (interactive)
    (if (= (count-windows) 1)
        (split-window-sensibly)
      (delete-other-windows)))

  (setq split-width-threshold 250)
  (define-key global-map (kbd "M-j") 'ric/split-dwim)
#+end_src

Nicer binding for =other-window=.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-j") 'other-window)
  (define-key lisp-interaction-mode-map (kbd "C-j") nil)
#+end_src

* Whitespace handling

Combine =just-one-space= and =delete-horizontal-space= on one toggle key:

#+begin_src emacs-lisp
  (define-key global-map (kbd "M-SPC") 'cycle-spacing)
#+end_src

On save, delete whitespace chars trailing each line.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Always uses spaces (never tabs) for indentation.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Use single space, rather than double space, as sentence delimiter for
moving and killing by sentence.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Paragraph formatting

The missing reverse operation to =fill-paragraph=; source from [[https://www.emacswiki.org/emacs/UnfillParagraph][EmacsWiki]].

#+begin_src emacs-lisp
  (defun unfill-paragraph (&optional region)
    "Opposite of fill-paragraph."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  (define-key global-map (kbd "M-Q") 'unfill-paragraph)
#+end_src

* GPG and EasyPG

Set this to ~loopback~ to redirect all gpg pinentry queries to the caller: in this case emacs minibuffer.

#+begin_src emacs-lisp
  (setq epg-pinentry-mode 'loopback)
#+end_src

* Straight package manager

#+begin_src emacs-lisp
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

Use =develop= branch instead of the infrequently-updated  =master=:

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")
#+end_src

Bootstrap straight on new emacs installs:

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Turn on ~use-package~ integration:

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

* Theme

Load my theme without prompting for safety.

#+begin_src emacs-lisp
  (defun brew-theme ()
    (interactive)
    (load-theme 'brew t))
#+end_src

Install theme from github.

#+begin_src emacs-lisp
  (use-package brew-theme
    :straight (brew-theme :type git :repo "git@github.com:rlister/brew-theme.git")
    :config
    (add-to-list 'custom-theme-load-path (expand-file-name  "straight/repos/brew-theme" straight-base-dir))
    (brew-theme))
#+end_src

* Font

Choose correct font based on my various screen sizes.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (when (= 1440 (x-display-pixel-width))
      (set-face-font 'default "Roboto Mono-14:foundry=GOOG"))
    (when (= 1920 (x-display-pixel-width))
      (set-face-font 'default "Roboto Mono-13:foundry=GOOG"))
    (when (= 2560 (x-display-pixel-width))
      (set-face-font 'default "Roboto Mono-11:foundry=GOOG"))
    (when (= 3840 (x-display-pixel-width))
      (set-face-font 'default "Roboto Mono-11:foundry=GOOG")))
#+end_src

* Dired

Jump straight to current dir listing, instead of prompting.

#+begin_src emacs-lisp
  (use-package dired
    :init
    (setq dired-guess-shell-alist-user '(("\\.pdf\\'" "mupdf"))) ;external programs to use
    (setq dired-listing-switches "-alh")                         ;human-readable file sizes
    :bind (("C-x d" . dired-jump)
           :map dired-mode-map
           ("C-t" . nil)))
#+end_src

* Parentheses

[[info:emacs#Matching][Show paren mode]] highlights matching delimiters.

#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-when-point-in-periphery t)
#+end_src

* macOS specifics

Fix modifier keys in macOS.

#+begin_src emacs-lisp
  (when (equal window-system 'ns)
    (setq ns-auto-hide-menu-bar nil)
    (setq ns-command-modifier 'control)
    (setq ns-right-command-modifier 'control)
    (setq ns-option-modifier 'meta)
    (setq ns-control-modifier 'control)
    (setq ns-function-modifier 'hyper))
#+end_src

* Selectrum

[[https://github.com/raxod502/selectrum/][Selectrum]] selection completion drop-in for completing-read:

#+begin_src emacs-lisp
  (use-package selectrum
    :straight t
    :config
    (selectrum-mode +1)
  )
#+end_src

[[https://github.com/raxod502/prescient.el][Prescient]] is a library for sorting candidate lists using the algorithm: last few, most frequent, remaining by length.

#+begin_src emacs-lisp
  (use-package selectrum-prescient
    :straight t
    :config
    (selectrum-prescient-mode +1)
  )
#+end_src

* Ctrlf search

[[https://github.com/raxod502/ctrlf][Ctrlf]] is an enhanced form of isearch. Turn it on, and change default
style to fuzzy search:

#+begin_src emacs-lisp
  (use-package ctrlf
    :straight t
    :config
    (ctrlf-mode +1)
    (setq ctrlf-mode-bindings
          '(("C-s"   . ctrlf-forward-fuzzy)
            ("C-r"   . ctrlf-backward-fuzzy)
            ("C-M-s" . ctrlf-forward-regexp)
            ("C-M-r" . ctrlf-backward-regexp)))
  )
#+end_src

* Transient

[[https://github.com/magit/transient][transient]] is loaded by =magit=, but ensure we load
=define-transient-command= before we call it during init.

#+begin_src emacs-lisp
  (use-package transient
    :straight t)
#+end_src

* Kill ring

[[https://github.com/browse-kill-ring/browse-kill-ring][browse-kill-ring]] is a better binding than =yank-pop=.

#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :straight t
    :config
    (browse-kill-ring-default-keybindings) ;M-y
  )
#+end_src

* Bufler

[[https://github.com/alphapapa/bufler.el][Bufler]] is an =ibuffer= replacement:

#+begin_src emacs-lisp
  (use-package bufler
    :straight t
    :bind
    ("C-x C-b" . bufler)
    )
#+end_src

* Project.el

Old version included in emacs, but get latest from melpa:

#+begin_src emacs-lisp
  (use-package project
    :straight t
    :config
    (add-to-list 'project-switch-commands '(?t "Vterm" ric/vterm-dwim))
    (add-to-list 'project-switch-commands '(?b "Buffer" project-switch-to-buffer)))
#+end_src

Get project name:

#+begin_src emacs-lisp
  (defun ric//project-name ()
    "Get simple directory name of current project, or nil if no project."
    (let ((path (cdr (project-current))))
      (if path
          (file-name-nondirectory (directory-file-name path)))))
#+end_src

Find files appropriately depending on whether in a project:

#+begin_src emacs-lisp
  (defun ric/find-file-dwim ()
    "Find file using project.el if in a project."
    (interactive)
    (if (project-current)
        (project-find-file)
      (call-interactively 'find-file)))

  (define-key global-map (kbd "M-o") 'ric/find-file-dwim)
#+end_src

* Version control

** magit

[[https://magit.vc/][Magit]] git porcelain.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind
    ("C-c g" . magit-status)
    ("C-x g" . magit-status)
    :config
    (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))
#+end_src

Requires an authinfo entry like:

#+begin_src
machine api.github.com login <user>^forge password <password>
#+end_src

** forge

Magit extensions for issues and pull requests.

#+begin_src emacs-lisp
  (use-package forge
    :straight (forge :type git :host github :repo "magit/forge")
    :after magit
    :defer t)
#+end_src

** github-review

[[https://github.com/charignon/github-review/][github-review]] for github inline comments on code reviews.

#+begin_src emacs-lisp
  (use-package github-review
    :straight t
    :bind
    (:map github-review-mode-map
          ("C-c C-c" . ric/github-review-transient)))
#+end_src

#+begin_src emacs-lisp
  (define-transient-command ric/github-review-transient ()
    "Github review commands."
    [["Submit"
      ("a" "approve" github-review-approve)
      ("c" "comment" github-review-comment)
      ("r" "reject" github-review-reject)]])
#+end_src

Requires an authinfo entry like:

#+begin_src
machine api.github.com login <user>^github-review password <password>
#+end_src

** git-link

Generate urls to git remote for region.

#+begin_src emacs-lisp
  (use-package git-link
    :straight t)
#+end_src

** git-timemachine

[[https://gitlab.com/pidu/git-timemachine][git-timemachine]] steps back through file versions in git.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight t)
#+end_src

* Org mode
** org

Use straight to get latest [[https://code.orgmode.org/bzg/org-mode][org-mode]] from source rather than old version shipped with emacs.

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :init
    (setq org-adapt-indentation nil)
    (setq org-src-fontify-natively t)
    (setq org-src-window-setup 'current-window) ;do not split windows
    (setq org-use-speed-commands 't) ;use speedkeys at start of headline (? for list of keys)
    (setq org-startup-folded t)      ;no expand all levels on opening file
    (setq org-directory "~/src/doc")
    (setq org-refile-targets '((nil :maxlevel . 1)
                               ("~/src/doc/work.org" :maxlevel . 3)
                               ("~/src/doc/home.org" :maxlevel . 3)))
    (setq org-fontify-done-headline t)
    (setq org-todo-keywords '("TODO" "BLOCK(b@/!)" "WIP(w!)" "|" "DONE(d!)" "CANCELLED(c@)"))
    (setq org-todo-interpretation 'sequence)
    (setq org-todo-keyword-faces
          '(("BLOCK" .  (:foreground "LightGoldenRod"))
            ("WAIT"  .  (:foreground "LightGoldenRod"))
            ("WIP"   .  (:foreground "LightGoldenRod"))))
    (setq org-log-done 'time)
    :config
    (setq auto-mode-alist (rassq-delete-all 'dcl-mode auto-mode-alist)) ;no dcl for .com files
    :config
    ;; unbind to use global binding
    (define-key org-mode-map (kbd "C-j") nil))
#+end_src

** org-agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :init
    (add-hook 'org-agenda-mode-hook 'hl-line-mode)
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-align-tags-to-column 80)
    (setq org-agenda-files '("~/src/doc/work.org" "~/src/doc/home.org"))
    (setq org-agenda-todo-ignore-scheduled 'all)
    (setq org-agenda-custom-commands
          '(
            ("g" "Geekbot"
             agenda ""
             ((org-agenda-files '("~/src/doc/work.org" "~/.org-jira/"))
              (org-agenda-overriding-header "Standup")
              (org-agenda-show-log t)
              (org-agenda-todo-keyword-format "- %-4s")
              (org-agenda-remove-tags t)
              (org-agenda-prefix-format "")))
            ("c" "Composite agenda and todo"
             ((agenda "")
              (alltodo)))
            ("h" "Home tasks"
             ((agenda "" ((org-agenda-files '("~/src/doc/home.org"))))
              (alltodo "" ((org-agenda-files '("~/src/doc/home.org"))))))
            ("w" "Work tasks"
             ((agenda ""
                      ((org-agenda-files '("~/src/doc/work.org" "~/.org-jira/"))
                       (org-agenda-text-search-extra-files nil)))
              (alltodo ""
                       ((org-agenda-files '("~/.org-jira/"))))
              ))))
    (setq org-log-done 'time)
    (setq org-agenda-log-mode-items '(clock state))
    :bind
    ("C-c a" . org-agenda))
#+end_src

** org-tempo

Structure templates starting with e.g. =<s<TAB>=. See ~org-structure-template-alist~ and ~org-tempo-keywords-alist~ for structure types.
Latex is available as both =l= and =L=, so reuse =l= for =emacs-lisp=.

 #+begin_src emacs-lisp
   (use-package org-tempo
     :after org
     :init
     (setcdr (assoc "l" org-structure-template-alist) "src emacs-lisp")
     )
#+end_src

** org-capture

Set up [[https://orgmode.org/org.html#Capture-templates][capture templates]].

#+begin_src emacs-lisp
  (use-package org-capture
    :init
    (setq org-capture-templates
          '(
            ("t" "Todo" entry (file+olp+datetree "~/src/doc/work.org")
             "* TODO %?" :empty-lines 0 :tree-type week)
            ("d" "Done" entry (file+olp+datetree "~/src/doc/work.org")
             "* DONE %?\n- State \"DONE\" %U" :empty-lines 0 :tree-type week)
            ("m" "Meeting" entry (file+olp+datetree "~/src/doc/work.org")
             "* MTG %?" :empty-lines 0 :tree-type week)
            ("h" "Home" entry (file+olp+datetree "~/src/doc/home.org")
             "* TODO %?" :empty-lines 0 :tree-type week)
            ("j" "Journal" entry (file+olp+datetree "~/src/doc/work.org")
             "* %<%H:%M> %?" :empty-lines 0 :tree-type week)
            )
          )
    :bind
    ("C-c c" . org-capture)
    )
#+end_src

** org-present

#+begin_src emacs-lisp
  (use-package org-present
    :straight (org-present :type git :host github :repo "rlister/org-present")
    :hook
    ((org-present-mode . (lambda ()
                           (org-present-big)
                           (org-display-inline-images)
                           (org-present-hide-cursor)
                           (org-present-read-only)))
     (org-present-mode-quit .(lambda ()
                               (org-present-small)
                               (org-remove-inline-images)
                               (org-present-show-cursor)
                               (org-present-read-write))))
    )
#+end_src

** org-jira

[[https://github.com/ahungry/org-jira][org-jira]] populates org-mode files with jira issue data.

Set up account lookup and login creds in =~/.authinfo.gpg=:

#+begin_src
machine atlassian.net url https://<account>.atlassian.net
machine <account>.atlassian.net user <email> port 443 password <passwd>
#+end_src

#+begin_src emacs-lisp
    (use-package org-jira
      :straight (org-jira :type git :host github :repo "ahungry/org-jira")
      :commands (org-jira-get-issue org-jira-get-issues)
      :config
      (let ((url (plist-get (nth 0 (auth-source-search :host "atlassian.net" :max 1 t)) :url)))
        (setq jiralib-url url)))
#+end_src

Now run =org-jira-get-issues=.

* vterm

[[https://github.com/akermu/emacs-libvterm][Emacs-vterm]] bridge to [[https://github.com/neovim/libvterm][libvterm]].

** linux install

On linux we can install from MELPA and compilation happens correctly inside emacs during install.

#+begin_src emacs-lisp
  (use-package vterm
    :if (equal system-type 'gnu/linux)
    :straight t
    :bind (
           ("C-c t" . vterm)
           :map vterm-copy-mode-map
           ("<M-return>" . vterm-copy-mode)
           :map vterm-mode-map
           ("<C-backspace>" . vterm-send-meta-backspace)
           ("<C-return>" . ric/vterm-mark-last-output)
           ("<M-return>" . vterm-copy-mode)
           ("M-v" . (lambda () (interactive) (vterm-copy-mode) (scroll-down-command)))
           ;; ("C-p" . (lambda () (interactive) (vterm-copy-mode) (previous-line)))
           )
    :init
    (setq vterm-max-scrollback 10000)
    (setq vterm-copy-exclude-prompt t)    ;exclude prompt from copy in vterm-copy-mode-done
    (setq vterm-buffer-name-string "*vterm %s*")
    :config
    (define-key vterm-mode-map (kbd "C-j") nil)
    (define-key vterm-mode-map (kbd "M-j") nil)
    (define-key vterm-mode-map (kbd "C-t") nil)
    (define-key vterm-mode-map (kbd "M-m") nil)
    (define-key vterm-mode-map (kbd "<f6>") nil)
    (define-key vterm-mode-map (kbd "<f7>") nil)
    (define-key vterm-mode-map (kbd "<f8>") nil)

    (defun ric/vterm-mark-last-output ()
      "Mark the last batch of output from a shell command."
      (interactive)
      (vterm-copy-mode)
      (previous-line)
      (set-mark-command nil)
      (vterm-previous-prompt 1)
      (forward-line 1)
      )
    )
#+end_src

** macos install

On macOS we need to download and compile emacs-vterm manually.

Dependencies:

#+begin_src sh
  brew install cmake libtool
#+end_src

Download:

#+begin_src sh
  cd ~/src
  git clone https://github.com/akermu/emacs-libvterm.git
#+end_src

Compile:

#+begin_src sh
  cd emacs-libvterm
  mkdir -p build
  cd build
  cmake ..
  make
#+end_src

then load the compiled lib in emacs:

#+begin_src emacs-lisp
  (use-package vterm
    :if (equal system-type 'darwin)
    :load-path "~/src/emacs-libvterm"
    :bind
    ("C-c t" . vterm))
#+end_src


* Movement commands

Preserve point position on scroll, so reverse operation returns to same location:

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
#+end_src

At beginning of line, =kill-line= kills newline as well:

#+begin_src emacs-lisp
  (setq kill-whole-line t)
#+end_src

Motion starting at end of line keeps to ends of lines:

#+begin_src emacs-lisp
  (setq line-move-visual nil)
  (setq track-eol t)
#+end_src

I use this more than =zap-to-char=. Use arg for n'th occurrence, negative for backwards.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-z") 'undo)
  (define-key global-map (kbd "M-z") 'zap-up-to-char)
#+end_src

Better key placement for common movement:

#+begin_src emacs-lisp
  (define-key global-map (kbd "M-f") 'forward-same-syntax)
  (define-key global-map (kbd "M-b") (lambda () (interactive) (forward-same-syntax -1)))
  (define-key global-map (kbd "M-p") 'backward-paragraph)
  (define-key global-map (kbd "M-n") 'forward-paragraph)
#+end_src

[[https://github.com/alezost/mwim.el][Mwim]] enhances ~C-a~ and ~C-e~ to move where I mean.

#+begin_src emacs-lisp
  (use-package mwim
    :straight t
    :bind
    ("C-a" . mwim-beginning)
    ("C-e" . mwim-end))
#+end_src

We no longer need =back-to-indentation=, so use the binding for =imenu=:

#+begin_src emacs-lisp
  (define-key global-map (kbd "M-m") 'imenu)
  (define-key global-map (kbd "C-c m") 'imenu)
#+end_src

[[https://github.com/noctuid/link-hint.el][Link-hint]] jumps to various kinds of links with avy interface.

#+begin_src emacs-lisp
  (use-package link-hint
    :straight t
    :bind
    ("C-c l" . link-hint-open-link)
    ("C-c L" . link-hint-copy-link)
    )
#+end_src

[[https://github.com/magnars/expand-region.el][expand-region]] increase/decrease region, semantically.

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    ("C-=" . 'er/expand-region))
#+end_src

Soup up =mark-word= to move backwards if at end of line, give or take
any non-word chars, and use a nicer binding than =C-@= on my keyboard.

#+begin_src emacs-lisp
  (defun ric/mark-word-args (&optional arg allow-extend)
    "Advise mark-word to move backwards if we are effectively at end of line."
    (if (looking-at "\\W*$")
        (list -1 t)
      (list arg t)))

  (advice-add 'mark-word :filter-args #'ric/mark-word-args)
  (global-set-key (kbd "<insert>") 'mark-word)
#+end_src

* Comments

Toggle comments on region or line, without moving point. This works better as a toggle than ~comment-dwim~.

#+begin_src emacs-lisp
  (defun ric/comment-dwim (&optional arg)
    "Toggle comments on region if active, otherwise toggle comment on line."
    (interactive "P")
    (if (region-active-p)
	(comment-or-uncomment-region (region-beginning) (region-end) arg)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position) arg)))

  (global-set-key (kbd "C-;") 'ric/comment-dwim)
#+end_src

* Ripgrep

[[https://github.com/dajva/rg.el][Rg]] is a classic emacs interface to [[https://github.com/BurntSushi/ripgrep][ripgrep]].

#+begin_src emacs-lisp
  (use-package rg
    :straight t
    :bind
    ("C-c r" . rg))
#+end_src
* Color display

Tell [[https://www.emacswiki.org/emacs/eww][shr and eww]] not to use colors from HTML (which are often ugly and broken).

#+begin_src emacs-lisp
  (setq shr-use-colors nil)
#+end_src

[[http://elpa.gnu.org/packages/rainbow-mode.html][Rainbow-mode]] to set background color for strings that match color names.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :defer t)
#+end_src

* Programming modes

** sh

#+begin_src emacs-lisp
(setq sh-basic-offset 2)
#+end_src

** ruby

Some extra filenames to use =ruby-mode=.

#+begin_src emacs-lisp
  (use-package ruby-mode
    :defer t
    :mode
    "Staxfile"
    "Envfile")
#+end_src

** yaml

Load yaml mode.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :defer t)
#+end_src

** python

Mess with indent level.

#+begin_src emacs-lisp
  (use-package python
    :defer t
    :init
    (setq python-indent 2))
#+end_src

** javascript

Mess with indent level.

#+begin_src emacs-lisp
  (use-package javascript-mode
    :defer t
    :init
    (setq js-indent-level 2))
#+end_src

** css

#+begin_src emacs-lisp
  (use-package css-mode
    :defer t
    :init
    (setq css-indent-offset 2))
#+end_src

** docker

Load [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]].

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :config
    (put 'dockerfile-image-name 'safe-local-variable #'stringp))
#+end_src

** string inflection for camelcase

#+begin_src emacs-lisp
  (use-package string-inflection
    :straight t
    :bind
    ("C-c i" . string-inflection-all-cycle))
#+end_src

* RSS

#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :config
    (setq shr-use-fonts nil)
    (setq elfeed-search-filter "@2-weeks-ago +unread")
    (setq elfeed-feeds
          '(
            ;("http://feeds.bbci.co.uk/news/rss.xml" news)
            ("https://www.archlinux.org/feeds/news/" linux)
            ("https://wiki.archlinux.org/index.php?title=Special:RecentChanges&feed=rss" linux)
            ("https://archlinux.org/feeds/planet" linux)
            ("https://www.archlinux.org/feeds/news/" linux)
            ("https://www.economist.com/the-economist-explains/rss.xml" news)
            ("https://www.economist.com/britain/rss.xml" news)
            ("https://www.economist.com/special-report/rss.xml" news)
            ("https://www.economist.com/united-states/rss.xml" news)
            ("http://pragmaticemacs.com/feed/" emacs)
            ("https://with-emacs.com/rss.xml" emacs)
            ("https://planet.emacslife.com/atom.xml" emacs)
            ("https://emacsair.me/feed.xml" emacs)
            ("http://emacs.stackexchange.com/feeds" emacs)
            ("http://planet.gnu.org/rss20.xml" gnu tech)
            ("https://aws.amazon.com/new/feed/" aws tech)
            ("http://feeds.feedburner.com/AmazonWebServicesBlog" aws tech)
            ("https://nullprogram.com/feed/" tech)
            ("https://www.jwz.org/blog/feed/" tech)
            ("http://theweeklylist.org/feed/?post_type=weekly-list" news)
            ))
    :bind (:map elfeed-show-mode-map
                ("r" . elfeed-kill-buffer)))
#+end_src

* Help

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode)
    :bind
    ("C-c k" . which-key-show-major-mode))
#+end_src

* Mew

[[http://mew.org/en/][Mew mailreader]]. Install as an OS package, and configure in =~/.mew.el=.

#+begin_src emacs-lisp
  (use-package mew
    :init
    (add-hook 'mew-summary-mode-hook 'hl-line-mode)
    :config
    (setq mew-refile-guess-alist
          '(("To:"
             (".*"   "%[Gmail]/Spam"))
            ))
    )
#+end_src

* Social

Install, then run =twit= to authenticate via oauth in browser.

#+begin_src emacs-lisp
  (use-package twittering-mode
    :straight (twittering-mode :type git :host github :repo "hayamiz/twittering-mode")
    :bind
    (:map twittering-mode-map
        ("n" . twittering-goto-next-status)
        ("p" . twittering-goto-previous-status)
        ("e" . twittering-goto-previous-status)
        ("N" . twittering-goto-next-status-of-user)
        ("P" . twittering-goto-previous-status-of-user)))
#+end_src

* Web

** eww

Store bookmarks in git-controlled location, and add missing bindings.

#+begin_src emacs-lisp
  (use-package eww
    :config
    (setq eww-bookmarks-directory "~/src/doc/")
    :bind (("C-h C-b" . eww-list-bookmarks)
           :map eww-bookmark-mode-map
           ("n" . next-line)
           ("p" . previous-line)
           ))
#+end_src

** w3m

Install package:

#+begin_src sh
  git clone https://aur.archlinux.org/emacs-w3m-git.git
#+end_src

Config:

#+begin_src emacs-lisp
  (use-package w3m
    :load-path "/usr/share/emacs/site-lisp/w3m"
    :config
    (setq w3m-search-default-engine "duckduckgo")
    (setq w3m-use-favicon nil)
    :bind (("C-h C-b" . w3m-bookmark-view)
           :map w3m-mode-map
           ("n" . w3m-next-anchor)
           ("C-<next>" . w3m-next-buffer)
           ("p" . w3m-previous-anchor)
           ("C-<prior>" . w3m-previous-buffer)
           ("x" . w3m-delete-buffer)
           ("C-t" . switch-to-buffer)
           ("M-n" . forward-paragraph)))
#+end_src

* Server

Start server if not running in this or any other emacs process.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* Mouse

Turn off mouse clicks from trackpad.

#+begin_src emacs-lisp
  (dolist (key '([mouse-1] [down-mouse-1] [C-down-mouse-1]))
    (global-unset-key key))
#+end_src

* Slack

Emacs slack mode. Slack team name and token are set in authinfo file in format:

#+begin_example
machine slack login <team> password <xoxs-...>
#+end_example

#+begin_src emacs-lisp
  (use-package slack
    :straight (slack :type git :host github :repo "yuya373/emacs-slack")
    :commands (slack-start)
    :init
    (setq slack-buffer-emojify t)
    (setq slack-buffer-emojify nil)
    (setq slack-prefer-current-team t)
    (setq slack-display-team-name nil) ;just channel etc name
    (setq slack-buffer-function #'switch-to-buffer) ;use same window
    (setq slack-modeline-count-only-subscribed-channel nil)
    (setq slack-thread-also-send-to-room nil)
    (setq lui-time-stamp-format "[%a %H:%M] ")
    (setq lui-time-stamp-position 'left)
    :bind (
           ([f5] . ric/slack-update-mark)
           ([f6] . slack-select-rooms)
           ([f7] . slack-all-unreads)
           ([f8] . tracking-next-buffer)
           ("M-s u" . slack-select-unread-rooms)
           ("M-s s" . tracking-next-buffer)
           ("M-s i" . slack-im-select)
           ("M-s r" . slack-message-add-reaction)
           ("M-s b" . slack-message-write-another-buffer)
           :map slack-mode-map
           ("M-p" . slack-buffer-goto-prev-message)
           ("M-n" . slack-buffer-goto-next-message)
           ("@" . slack-message-embed-mention)
           ("#" . slack-message-embed-channel)
           ("C-c C-e". slack-message-edit)
           ("C-c C-k". slack-message-delete)
           ("C-;" . ":+1:")
           :map slack-thread-message-buffer-mode-map
           ("M-p" . slack-buffer-goto-prev-message)
           ("M-n" . slack-buffer-goto-next-message)
           ("@" . slack-message-embed-mention)
           ("#" . slack-message-embed-channel)
           ("C-c C-e". slack-message-edit)
           ("C-c C-k". slack-message-delete))
    :config
    (slack-register-team
     :default t
     :name (plist-get (car (auth-source-search :host "slack")) :user)
     :token (auth-source-pick-first-password :host "slack")
     :display-profile-image nil
     :mark-as-read-immediately t
     :modeline-enabled t
     :modeline-name "ap"
     :visible-threads t
     :disable-block-format t)

    ;; remove user status and image
    (defun slack-user-status (_id _team) "")

    ;; disable user images
    (cl-defun slack-user-image (user team &optional (size 32)) nil)

    ;; shorten buffer names
    (cl-defmethod slack-buffer-name ((this slack-message-buffer))
      (slack-if-let* ((team (slack-buffer-team this))
                      (room (slack-buffer-room this))
                      (room-name (slack-room-name room team)))
          (format  "*%s:%s*"
                   (s-word-initials (oref team name))
                   room-name)))

    ;; implement https://github.com/yuya373/emacs-slack/pull/532 until merged upstream
    ;; so that we can load channels with a giphy image
    (defclass slack-image-block-element (slack-block-element)
      ((type :initarg :type :type string :initform "image")
       (image-url :initarg :image_url :type string)
       (alt-text :initarg :alt_text :type string)
       (image-height :initarg :image_height :type (or number null))
       (image-width :initarg :image_width :type (or number null))
       (image-bytes :initarg :image_bytes :type (or number null))))

    ;; slack-insert-emoji breaks with selectrum
    ;; implement patch from https://github.com/maurelio1234/emacs-slack/commit/db57f08bcff529cffe7f68d2ba95eb3f527c17f0
    ;; until this is fixed: https://github.com/yuya373/emacs-slack/issues/517
    (defun slack-select-emoji (team)
      (if (and (fboundp 'emojify-completing-read)
               (fboundp 'emojify-download-emoji-maybe))
          (progn (emojify-download-emoji-maybe)
                 (cl-labels
                     ((select ()
                              (emojify-completing-read "Select Emoji: "
                                                       #'(lambda (data)
                                                           (or (gethash data
                                                                        slack-emoji-master
                                                                        nil)
                                                               (gethash data
                                                                        (oref team emoji-master)
                                                                        nil))))))
                   (if (< 0 (hash-table-count slack-emoji-master))
                       (select)
                     (slack-emoji-fetch-master-data (car (hash-table-values slack-teams-by-token)))
                     (select))))
        (read-from-minibuffer "Emoji: ")))

    (defun slack-emoji-fetch-master-data (team)
      (cl-labels
          ((success (&key data &allow-other-keys)
                    (slack-request-handle-error
                     (data "slack-emoji-fetch-master-data")
                     (cl-loop for emoji in data
                              do (let ((short-names (plist-get emoji :short_names)))
                                   (when short-names
                                     (cl-loop for name in short-names
                                              do (let* ((emoji-key (format ":%s:" name))
                                                        (emoji (emojify-get-emoji emoji-key))
                                                        (emoji-name (if emoji (ht-get emoji "name") ""))
                                                        (emoji-style (if emoji (ht-get emoji "style") "")))
                                                   (puthash (format "%s - %s (%s)" emoji-key emoji-name emoji-style)
                                                            t
                                                            slack-emoji-master)))))))))
        (slack-request
         (slack-request-create
          slack-emoji-master-data-url
          team
          :type "GET"
          :success #'success
          :without-auth t
          :sync t)))))
#+end_src

** Transient bindings

#+begin_src emacs-lisp
  (define-transient-command ric/slack-transient ()
    "Slack commands."
    [["Buffers"
      ("s" "next buffer" tracking-next-buffer)
      ("s-s" "next buffer" tracking-next-buffer)]
     ["Rooms"
      ("u" "unread rooms" slack-select-unread-rooms)
      ("c" "room select" slack-select-rooms)]
     ["Threads"
      ("i" "im select" slack-im-select)
      ("t" "go to thread" slack-thread-show-or-create)
      ("T" "all threads" slack-all-threads)]
     ["Compose"
      ("b" "write buffer" slack-message-write-another-buffer)
      ("k" "delete message" slack-message-delete)
      ("m" "update mark" ric/slack-update-mark)
      ("y" "clipboard upload" slack-clipboard-image-upload)
      ("f" "file upload" slack-file-upload)]
     ["Emoji"
      ("e" "insert emoji" slack-insert-emoji)
      ("r" "add reaction" slack-message-add-reaction)]
     ["Server"
      ("S" "start server" slack-start)
      ("C" "close websocket" slack-ws-close)
      ("K" "kill message buffers" ric/kill-slack-message-buffers)]])

  (define-key global-map (kbd "s-s") 'ric/slack-transient)
#+end_src

** Alerts

Set up =alert= for slack notification.

#+begin_src emacs-lisp
  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'libnotify))
#+end_src

** Mark hack

Some DMs fail to update the mark correctly, and thus continue to show
huge numbers of unreads. Bind this to a key to force update.

#+begin_src emacs-lisp
  (defun ric/slack-update-mark ()
    "Force the read mark to the end of the channel."
    (interactive)
    (end-of-buffer)
    (slack-buffer-goto-prev-message)
    (slack-message-update-mark)
    (end-of-buffer))
#+end_src

** Kill all slack message buffers

#+begin_src emacs-lisp
  (defun ric/kill-slack-message-buffers ()
    "Kill all slack message buffers."
    (interactive)
    (save-excursion
      (let ((count 0))
        (dolist (buffer (buffer-list))
          (set-buffer buffer)
          (when (equal major-mode 'slack-message-buffer-mode)
            (setq count (1+ count))
            (kill-buffer buffer)))
        (message "Killed %i slack buffers" count))))
#+end_src

* gcalcli

#+begin_src emacs-lisp
  (use-package gcalcli-mode
    :straight (gcalcli-mode :type git :host github :repo "rlister/gcalcli-mode")
    :config
    (setq gcalcli-bin "~/.asdf/shims/gcalcli")
    (setq gcalcli-config-alist
          '((home . "~/.config/gcalcli/home")
            (work . "~/.config/gcalcli/work"))))
#+end_src

* bbdb

Install bbdb and vcard importer.

#+begin_src emacs-lisp
  (use-package bbdb
    :straight t)

  (use-package bbdb-vcard
    :straight t)
#+end_src
